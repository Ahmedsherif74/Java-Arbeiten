Java DataTypes :

String : A data Type to store text in " "

byte : to store an intger -128 to 127

short : to store numbers from -32,768 to 32,767

int : to store numbers // -2,147,483,648 to 2,147,483,647

long : to store numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807

float : to store numbers with decimals like 1.5f //  Sufficient for storing 6 to 7 decimal digits

double : to store decimals Sufficient for storing 15 to 16 decimal digits   should end with d

char : to store only single character // char myVar1 = 65  sout myVar1 will print the ASCII code of this number

boolean : to store either true or false //true or false

How to declare more than one variable in just one line :

int x , y , z ;

x = bew ;

and so on



TypeCasting :

Type casting is when you assign a value of one primitive data type to another type.

Widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double

    int myInt = 9;
    double myDouble = myInt; // Automatic casting: int to double

Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

    double myDouble = 9.78d;
    int myInt = (int) myDouble; // Manual casting: double to int


Operations :

+ - * / % ++ --


Assignment operations :

x +=3 // Means x=x+3

x -=3 // Means x=x-3

x *=3 // Means x=x*3


Comparison Operatots :

== // If the two items are equal

!= // If the two items are not equal

> // first greater than 2nd

< // 2nd greater than first

>= // Greater than or equal to

<= // Less than or equal to


Logical Operators :

&& // Returns true if both statements are true

|| // Returns true if one of the statements is true

! // Reverse the result, returns false if the result is true


String Stuff :


String txt = "Ahmed" ;

txt.lenght(); // To fetch the lenght of this string

txt.toUpperCase(); // to change it to uppercase

txt.toLowerCase(); // to change it to lowercase

txt.indexOf("h"); // it should give me the position of that character of the char or

 if i gave it a word it should give me the position of the first char of this word // it outputs here 1



String Concatenation :

you can use +

also you can use

concat(): // firstName.concat(lastName);  and it will handle the spaces


Java Math :

Math.max(x,y); // it will gives you the max between the x and y

Math.min(x,y): // min between x and y

Math.sqrt(x); // it will gives you the sqareRoot of value X

Math.abs(x); // it will gives you the positive absolute value

Math.random(): // fetch a random number  int randomNum = (int)(Math.random() * 101);  // 0 to 100

Math.random // Gives you a double always




Java if else ( Conditions ) :


if (condition) {
    The Body of the Condition
}


if (condition) {
// the Body of the condition
} else {
// the body of the else
}


if (condition1) {
  // Body of the if
} else if (condition2) {
  // Body of the else if
} else {
  //Body of the else
}




Short Hand Else If :


variable = (condition) ? expressionTrue :  expressionFalse;


String result = (time < 18) ? "Good day." // if part : "Good evening." // else part;



Java Switch Statements :


switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default: // this is the case where if we could not find our wanted case so we excute the default Case
    // code block
}


Java Loops :


    While Loops :

    while (condition) {
      // code block to be executed
    }


    int i = 0;
    while (i < 5) {
    sout(i);
    i++ ;
    }


    Do while :


    do {
      // do the following
    }
    while (condition);


    For Loop :

    for (statement 1; statement 2; statement 3) {
      // code block to be executed
    }

    Statement 1 is executed (one time) before the execution of the code block.

    Statement 2 defines the condition for executing the code block.

    Statement 3 is executed (every time) after the code block has been executed.

    for (int i = 0; i < 5; i++) {
      System.out.println(i);
    }


    for (int i=0 ; i < 5 ; i ++ ){
    body of the loop
    }

    for (int i = 0; i <= 10; i = i + 2) {
      System.out.println(i);
    } // this is printin the even numbers from 1 to 10


    Nested ForLoop :


    // Outer loop
    for (int i = 1; i <= 2; i++) {
      System.out.println("Outer: " + i); // Executes 2 times

      // Inner loop
      for (int j = 1; j <= 3; j++) {
        System.out.println(" Inner: " + j); // Executes 6 times (2 * 3)
      }
    }  // the outer loop runs two times and the inner loop runs 6 times



Java Break :

for (int i = 0; i < 10; i++) {
  if (i == 4) {
    break;
  }
  System.out.println(i);
} // the loop stops when i equals to 4




Java continue :

for (int i = 0; i < 10; i++) {
  if (i == 4) {
    continue;
  }
  System.out.println(i);
} // Continue means skip the next instruction and go for the next iteration



Java Arrays :

String[] cars = { "Bmw" , "Volvo" } ; // array of Strings

sout ( cars[0]) ; // printing the first item of car array

cars[0] = "opel" ; // Now we're adding this in position 0 in the array

cars.lenght ; // gives you the lenght of the array



Loop over an Array :


String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};

for (int i = 0; i < cars.length; i++) {
  System.out.println(cars[i]);
}

int[] myNum = { 12 ,10,15}; // array of integers


2D Arrays :


int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; // first arrguments present the 1st row , 2nd arrguments present the 2nd row

the array will be like matrix :

{
1 2 3 4
5 6 7
    }

To access any number of this matrix

myNumbers [row][column] ;

myNumbers [1][2] ; the 2nd row and the 3rd column // which is 7

To change the element value do the following :

myNumbers [1][1] = 5 ; // Means we want to update the value of the 2nd row and 2nd column // then 5 instead of 6


Loop Over A 2D Arrays :


int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };


for (int i = 0; i < myNumbers.length; ++i) {


  for (int j = 0; j < myNumbers[i].length; ++j) {
    System.out.println(myNumbers[i][j]); // this loop goes over every column of each row in the matrix
  }

  }



Java Methods :

Basic without parameters:

public void myMethod (){
Body of the method
}


With parameters :

static void myMethod(String fname , int age) {
    System.out.println( fname + " " + age + " Refsnes" );
  }


  myMethod ("bew" , 15) ;


With Conditions :

  static void checkAge(int age) {

    // If age is less than 18, print "access denied"
    if (age < 18) {
      System.out.println("Access denied - You are not old enough!");

    // If age is greater than, or equal to, 18, print "access granted"
    } else {
      System.out.println("Access granted - You are old enough!");
    }

  }



 Java Methods Return Values :


 If i want to return a value ; i should do the following

 static int // return an int (int x){
 return 5+x ;
 }




